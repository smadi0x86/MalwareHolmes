package Malware.logic;

import java.io.File;
import java.io.IOException;
import java.nio.file.*;
import java.nio.charset.StandardCharsets;

public class QuarantineManager {
    private final String quarantineFolder;

    public QuarantineManager(String quarantineFolder) {
        this.quarantineFolder = quarantineFolder;
        File file = new File(quarantineFolder);
        if (!file.exists()) {
            if (file.mkdir()) {
                System.out.println("[INFO] Quarantine folder is created!");
                System.out.println("[INFO] Quarantine folder path: " + quarantineFolder);
            } else {
                System.out.println("[ERROR] Failed to create quarantine folder!");
            }
        }
    }

    public void moveFileToQuarantine(String filePath) {
        File file = new File(filePath);
        if (file.exists()) {
            Path src = Paths.get(filePath);
            Path dest = Paths.get(quarantineFolder, file.getName());
            try {
                Files.move(src, dest, StandardCopyOption.REPLACE_EXISTING);
                System.out.println("[INFO] Moved the file to quarantine: " + file.getName());
            } catch (IOException e) {
                System.out.println("[ERROR] An error occurred while moving the file to quarantine.");
                e.printStackTrace();
            }
        } else {
            System.out.println("[ERROR] The file to be moved to quarantine does not exist.");
        }

        System.out.println("[DEBUG] File path: " + filePath);
    }

    public void quarantineAndEncryptFile(String filePath, String key) {
        moveFileToQuarantine(filePath);
        File file = new File(quarantineFolder, new File(filePath).getName());

        try {
            byte[] fileContent = Files.readAllBytes(file.toPath());
            byte[] encryptedContent = xorWithKey(fileContent, key.getBytes(StandardCharsets.UTF_8));
            Files.write(file.toPath(), encryptedContent);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void decryptAndRestoreFile(String filePath, String key) {
        File file = new File(filePath);
        if (file.exists()) {
            try {
                byte[] fileContent = Files.readAllBytes(file.toPath());
                byte[] decryptedContent = xorWithKey(fileContent, key.getBytes(StandardCharsets.UTF_8));
                Files.write(file.toPath(), decryptedContent);
            } catch (IOException e) {
                e.printStackTrace();
            }

            Path src = Paths.get(filePath);
            Path dest = Paths.get(file.getName());
            try {
                Files.move(src, dest, StandardCopyOption.REPLACE_EXISTING);
                System.out.println("[INFO] Restored the file from quarantine: " + file.getName());
            } catch (IOException e) {
                System.out.println("[ERROR] An error occurred while restoring the file from quarantine.");
                e.printStackTrace();
            }
        } else {
            System.out.println("[ERROR] The file to be restored from quarantine does not exist.");
        }
    }

    private byte[] xorWithKey(byte[] a, byte[] key) {
        byte[] out = new byte[a.length];
        for (int i = 0; i < a.length; i++) {
            out[i] = (byte) (a[i] ^ key[i % key.length]);
        }
        return out;
    }
}
