package Malware.logic;

import java.io.IOException;
import java.nio.file.*;
import java.util.function.Predicate;

import Malware.logic.peAnalysis.NativeWrapperPE;
import Malware.logic.staticAnalysis.NativeWrapper;

public class DirectoryMonitorService implements Runnable {

    private final Path dir;
    private final MalwareAnalyzer malwareAnalyzer;
    private final Predicate<Path> filter;

    public DirectoryMonitorService(Path dir, MalwareAnalyzer malwareAnalyzer, Predicate<Path> filter) {
        this.dir = dir;
        this.malwareAnalyzer = malwareAnalyzer;
        this.filter = filter;
    }

    @Override
    public void run() {
        try (WatchService watcher = FileSystems.getDefault().newWatchService()) {
            dir.register(watcher, StandardWatchEventKinds.ENTRY_CREATE);

            System.out.println("[!] MalwareHolmes watching the folder: " + dir + "\n");

            while (true) {
                WatchKey key;
                try {
                    key = watcher.take();
                } catch (InterruptedException ex) {
                    return;
                }

                for (WatchEvent<?> event : key.pollEvents()) {
                    WatchEvent.Kind<?> kind = event.kind();

                    @SuppressWarnings("unchecked")
                    WatchEvent<Path> ev = (WatchEvent<Path>) event;
                    Path fileName = ev.context();

                    if (kind == StandardWatchEventKinds.ENTRY_CREATE && filter.test(fileName)) {

                        // A new file has been created
                        System.out.println("\n");
                        System.out.println("[+] New file: " + fileName + " is created in the directory.\n");

                        // Run malware analysis code on the new file
                        analyzeFile(dir.resolve(fileName).toString());
                    }
                }

                boolean valid = key.reset();
                if (!valid) {
                    break;
                }
            }
        } catch (IOException e) {
            System.err.println("Exception occurred while monitoring directory: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void analyzeFile(String filePath) {
        try {
            // Check if the file is a PE/exe
            boolean isPEFile = isPEFile(filePath);

            // Start hash-based analysis
            String analysisResult = malwareAnalyzer.analyzeFile(filePath);
            System.out.println("Analysis hash result for your file: " + analysisResult + "\n");

            // Start static analysis if not a PE file
            if (!isPEFile) {
                NativeWrapper nativeWrapper = new NativeWrapper();
                nativeWrapper.analyze(filePath);
            } else {
                System.out.println("PE file detected! Dumping its information...");

                // start PE analysis
                NativeWrapperPE nativeWrapperPE = new NativeWrapperPE();

                // Dump PE meta data
                nativeWrapperPE.pemetaData(filePath);

                // Dump PE information
                nativeWrapperPE.analyzePE(filePath);

                System.out.println("Dumped PE successfully!\n");
                System.out.println(
                        "The PE dump log is saved to current directory: " + System.getProperty("user.dir") + "\n");

                // Automated PE analysis
                String filenameWithoutExt = filePath.substring(0, filePath.lastIndexOf('.'));
                String peLogFilePath = System.getProperty("user.dir") + "\\" + filenameWithoutExt + "PELog.txt";
                String analysisLogFilePath = peLogFilePath.replace("PELog", "AnalysisPELog");
                LogAnalyzer.analyzeLogFile(peLogFilePath, analysisLogFilePath);

                System.out.println("Analysis log is saved to: " + analysisLogFilePath);
            }
        } catch (IOException e) {
            System.err.println("Exception occurred during file analysis: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("Unexpected exception occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // Check if the file is a PE/exe to run dynamic analysis
    private boolean isPEFile(String filePath) {
        try {
            byte[] fileBytes = Files.readAllBytes(Paths.get(filePath));

            // Add a check to ensure the fileBytes array is not empty
            if (fileBytes.length > 1 && fileBytes[0] == 'M' && fileBytes[1] == 'Z') {
                return true;
            }
        } catch (IOException e) {
            System.err.println("Exception occurred while reading file: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }
}