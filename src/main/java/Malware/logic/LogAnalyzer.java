package Malware.logic;

import java.nio.file.*;
import java.io.*;
import java.util.stream.*;

public class LogAnalyzer {

    public static void analyzeLogFile(String filePath, String analysisFilePath) {
        try (Stream<String> lines = Files.lines(Paths.get(filePath));
                BufferedWriter writer = Files.newBufferedWriter(Paths.get(analysisFilePath))) {

            lines.forEach(line -> {
                if (lineHasIdentifiableKey(line)) {
                    String analysis = analyzeLine(line);
                    try {
                        writer.write(analysis);
                        writer.newLine();
                    } catch (IOException e) {
                        System.err.println("Failed to write analysis to log: " + e.getMessage());
                    }
                }
            });
        } catch (IOException e) {
            System.err.println("Failed to analyze log file: " + e.getMessage());
        }
    }

    private static boolean lineHasIdentifiableKey(String line) {
        String key = line.split("\\s+")[0].trim();
        return key.equals("Machine") || key.equals("NumberOfSections") || key.equals("Characteristics") ||
                key.equals("SizeOfCode") || key.equals("MajorLinkerVersion") || key.equals("MinorLinkerVersion") ||
                key.equals("ImportDirectory") || key.equals("RelocationsDirectory") || key.equals("IATDirectory");
    }

    private static String analyzeLine(String line) {
        String[] parts = line.split("\\s+");
        String key = parts[0].trim();
        String value = parts.length > 1 ? parts[1].trim() : "";

        switch (key) {
            case "Machine":
                return value.equals("8664") ? line + " -- Note: Machine code is standard."
                        : line + " -- Warning: Unusual machine code. Might be a sign of malware.";
            case "NumberOfSections":
                int numberOfSections = Integer.parseInt(value, 16);
                return numberOfSections > 10
                        ? line + " -- Warning: Unusually high number of sections. Might be a sign of malware."
                        : line + " -- Note: Number of sections is within normal range.";
            case "SizeOfCode":
                int sizeOfCode = Integer.parseInt(value, 16);
                return sizeOfCode > 100000
                        ? line + " -- Warning: Unusually large code size. Might be a sign of malware."
                        : line + " -- Note: Code size is within normal range.";
            case "MajorLinkerVersion":
            case "MinorLinkerVersion":
                int version = Integer.parseInt(value, 16);
                return version < 2 ? line + " -- Warning: Old linker version. Might be a sign of malware."
                        : line + " -- Note: Linker version is up-to-date.";
            case "ImportDirectory":
                int importDirSize = Integer.parseInt(value, 16);
                return importDirSize > 10000
                        ? line + " -- Warning: Unusually large Import Directory. Might be a sign of malware."
                        : line + " -- Note: Import Directory size is within normal range.";
            case "RelocationsDirectory":
                return value.equals("00000000")
                        ? line + " -- Warning: Relocations Directory missing. Might be a sign of malware."
                        : line + " -- Note: Relocations Directory exists.";
            case "IATDirectory":
                int iatDirSize = Integer.parseInt(value, 16);
                return (iatDirSize < 500 || iatDirSize > 5000)
                        ? line + " -- Warning: Unusual IAT Directory size. Might be a sign of malware."
                        : line + " -- Note: IAT Directory size is within normal range.";
            default:
                return line;
        }
    }
}
