package Malware.object_oriented;

import java.io.BufferedReader; // Import the BufferedReader class to read the content of the file.
import java.io.FileReader; // Import the FileReader class to read the content of the file.
import java.io.IOException; // Import the IOException class to handle I/O exceptions.
import java.security.NoSuchAlgorithmException; // Import the NoSuchAlgorithmException class to handle NoSuchAlgorithmException exceptions.

public class ManualMalwareAnalyzer extends MalwareAnalyzer {

    /*
     * This is a child class of the MalwareAnalyzer class.
     * If the file is not identified as malware, it performs manual checking on the file to detect any malicious keywords in the file.
     * 
     * References:
     *  - https://stackoverflow.com/questions/326390/how-to-create-a-java-string-from-the-contents-of-a-file
     *  - https://stackoverflow.com/questions/4716503/reading-a-plain-text-file-in-java
     */

    public ManualMalwareAnalyzer(SignatureIdentifier signatureIdentifier) {
        super(signatureIdentifier); // ! This calls the constructor of the parent class.
    }

    // Override the analyzeFile method to include manual keyword checking
    // ! IO exception is thrown at the overridden calculateHash method at parent class.
    @Override
    public String analyzeFile(String filePath) throws IOException {

        String fileHash = null; // = null because the fileHash variable is not initialized in the catch block below, so it cannot be used in the finally block.

        // ! This will catch the NoSuchAlgorithmException thrown by the calculateHash method and throw the IOException that it received from below to the parent class.
        try {
            fileHash = calculateHash(filePath);

            boolean containsMaliciousKeywords = checkForMaliciousKeywords(filePath); // Perform manual keyword checking on the file

            if (containsMaliciousKeywords) {
                System.out.println("[!] File identified as malware through manual keyword checking.");
            } else {

                signatureIdentifier.compareHash(fileHash);
                return fileHash; // this will return the hash of the file if the file is not identified as malware.
            }

        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
            // ! finally is always executed, even if the try block is not executed.
        } finally {
            System.out.println();
            System.out.println("[!] The checkForMaliciousKeywords returned: " + checkForMaliciousKeywords(filePath));
            System.out.println("[!] The fileHash is: " + fileHash);
        }

        return null;
    }

    // ! This IO exception is thrown at the overridden analyzeFile method above.
    private boolean checkForMaliciousKeywords(String filePath) throws IOException {

        // Perform manual keyword checking logic here
        // Return true if malicious keywords are found, false otherwise
        // No catch, just throw to above.

        String fileContent = readFileContent(filePath); // This variable is used to store the content of the file.

        String[] keywords = { "malware", "virus", "exploit", "backdoor", "trojan", "worm", "spyware", "ransomware",
                "adware", "rootkit", "keylogger", "sys_write", "conti" };

        // loop through keyword in keywords
        for (String keyword : keywords) {
            // if fileContent contains keyword
            if (fileContent.contains(keyword)) {
                return true;
            }
        }

        return false; // I didnt use else because this method requires a return statement outside the for loop.
    }

    private String readFileContent(String filePath) throws IOException {

        // Read the content of the file and return it as a string
        // No catch, just throw to above.

        StringBuilder contentBuilder = new StringBuilder(); // StringBuilder is used to append the content of the file to the contentBuilder variable.

        BufferedReader reader = new BufferedReader(new FileReader(filePath)); // BufferedReader is used to read the content of the file.

        String line; // This variable is used to store the content of the file line by line.

        // while the line is not null (while the line is not empty), append the line to the contentBuilder variable.
        while ((line = reader.readLine()) != null) {
            contentBuilder.append(line).append("\n");
        }

        reader.close();
        return contentBuilder.toString(); // return the content of the file as a string to the checkForMaliciousKeywords method.
    }
}

// ! Done