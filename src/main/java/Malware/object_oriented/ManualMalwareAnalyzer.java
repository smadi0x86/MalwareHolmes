package Malware.object_oriented;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;

public class ManualMalwareAnalyzer extends MalwareAnalyzer {

    /*
     * This is a child class of the MalwareAnalyzer class.
     * If the file is not identified as malware, it performs manual checking on the file to detect any malicious keywords in the file.
    */

    public ManualMalwareAnalyzer(SignatureIdentifier signatureIdentifier) {
        super(signatureIdentifier);
    }

    // Override the analyzeFile method to include manual keyword checking
    @Override
    public String analyzeFile(String filePath) throws IOException {

        String fileHash = null;

        try {
            fileHash = calculateHash(filePath);
            // Perform manual keyword checking on the file
            boolean containsMaliciousKeywords = checkForMaliciousKeywords(filePath);

            if (containsMaliciousKeywords) {
                System.out.println("[!] File identified as malware through manual keyword checking.");
            } else {

                signatureIdentifier.compareHash(fileHash);
                return fileHash;
            }

        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
            // finally is always executed, even if the try block is not executed.
        } finally {
            System.out.println();
            System.out.println("[!] The checkForMaliciousKeywords returned: " + checkForMaliciousKeywords(filePath));
            System.out.println("[!] The fileHash is: " + fileHash);
        }

        return null;
    }

    // ! This IO exception is thrown at the overridden analyzeFile method above.
    private boolean checkForMaliciousKeywords(String filePath) throws IOException {

        String fileContent = readFileContent(filePath);

        // Customize this as you like
        String[] keywords = { "WriteProcessMemory", "WinExec", "ShellExecute", "NTCreateThread",
                "CryptDecrypt", "bind", "GetSystemInfo" };

        // loop through keyword in keywords
        for (String keyword : keywords) {
            if (fileContent.contains(keyword)) {
                return true;
            }
        }
        // I didnt use else because this method requires a return statement outside the for loop.
        return false;
    }

    private String readFileContent(String filePath) throws IOException {
        // StringBuilder is used to append the content of the file to the contentBuilder variable.
        StringBuilder contentBuilder = new StringBuilder();

        BufferedReader reader = new BufferedReader(new FileReader(filePath));

        String line;
        // while the line is not null (while the line is not empty), append the line to the contentBuilder variable.
        while ((line = reader.readLine()) != null) {
            contentBuilder.append(line).append("\n");
        }
        reader.close();
        return contentBuilder.toString(); // return the content of the file as a string to the checkForMaliciousKeywords method.
    }
}