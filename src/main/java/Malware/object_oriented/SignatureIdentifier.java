package Malware.object_oriented;

public class SignatureIdentifier {

    /*
     * This works with SignatureDatabase.java and the Signature.java class to compare the hash of the file to the hash of the signature in the database.
     * This class is responsible for identifying whether a given hash corresponds to any known malware signatures.
     * The SignatureIdentifier class encapsulates the logic for comparing the input hash with the stored malware hashes in the SignatureDatabase.
     * It takes a SignatureDatabase object as a dependency and provides a method to check if a given hash exists in the database and returns the associated malware name if found.
     
     ! Pseudo code:
        ? 0. Import all necessary libraries.
        ? 1. Declare a private SignatureDatabase variable named signatureDatabase to store the instance of SignatureDatabase.
        ? 2. Implement a constructor for the SignatureIdentifier class that takes a SignatureDatabase object as a parameter.
        ? 3. Within the constructor, assign the provided SignatureDatabase object to the signatureDatabase variable.
        ? 4. Implement a method called compareHash that takes a hash as a parameter.
        ? 5. Invoke the getMalwareNameByHash method of the signatureDatabase object and pass the provided hash as an argument.
        ? 6. Capture the returned malware name.
        ? 7. If the returned malware name is not null or empty, output a message indicating that the file is identified as malware and display the malware name.
        ? 8. If the returned malware name is null or empty, output a message indicating that the file is not recognized as malware.
    
        * References:
        *    - https://www.baeldung.com/java-string-is-empty-null
        *    - https://www.baeldung.com/java-check-string-empty 
        *    - https://www.baeldung.com/java-check-if-string-is-empty
    */

    // ! This is the dependency that is injected into the constructor of the SignatureIdentifier class to provide access to the malware signatures.
    private SignatureDatabase signatureDatabase; // example of composition

    // ? This is the constructor that takes a SignatureDatabase object as a parameter.
    public SignatureIdentifier(SignatureDatabase signatureDatabase) {
        this.signatureDatabase = signatureDatabase;
    }

    // ? This method takes a hash as a parameter from the MalwareAnalyzer class and compares it to the hashes in the database. 
    public void compareHash(String hash) {

        // ? This is the method that is called from the SignatureDatabase class to compare the hash of the file to the hash of the signature in the database.
        String malwareName = signatureDatabase.getMalwareNameByHash(hash);

        // ? If the returned malware name is not null or empty, output a message indicating that the file is identified as malware and display the malware name.
        if (malwareName != null && !malwareName.isEmpty()) {
            System.out.println("[!] You are doomed, It's a malware called: " + malwareName);
            System.out.println();
        } else {
            System.out.println("[!] File not recognized as malware or the malware author is too good!");
        }
    }
}
