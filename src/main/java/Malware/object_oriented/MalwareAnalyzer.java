package Malware.object_oriented;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class MalwareAnalyzer {

    /*
     * This class is responsible for analyzing an input file using an object-oriented paradigm. 
     * It calculates the hash value of the file and checks if it matches any known malware signature.
     * The MalwareAnalyzer class encapsulates the analysis logic and provides a public method to perform the analysis.
    */

    protected SignatureIdentifier signatureIdentifier;

    // Constructor for the MalwareAnalyzer class to initialize the signatureIdentifier object so that it is ready to be used.
    public MalwareAnalyzer(SignatureIdentifier signatureIdentifier) {
        this.signatureIdentifier = signatureIdentifier;
    }

    public String analyzeFile(String filePath) throws IOException {

        String fileHash;

        try {
            fileHash = calculateHash(filePath);

            signatureIdentifier.compareHash(fileHash);

            return fileHash;

        } catch (NoSuchAlgorithmException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        }

        return null;
    }

    // This will receive IOexception from the child class then throw it to main.
    public String calculateHash(String filePath) throws IOException, NoSuchAlgorithmException {

        /*
         * Calculates the hash value of the input file.
         * 
         * Parameters:
         *  - filePath: The path or file object of the input file.
         * 
         * Returns:
         *  - The calculated hash value as a hexadecimal string.
         * 
         ! Throws:
         ?  - IOException: If an I/O error occurs during file reading.
         ?  - NoSuchAlgorithmException: If the hashing algorithm specified is not available.
         ! Catches:
         ? - I/O exception is catched in the main method, which was sent from the child class methods.
         ? - NoSuchAlgorithmException is catched in the analyzeFile method.
         */

        // Create a file object from the input file path.
        File file = new File(filePath);
        // Create a FileInputStream object to read the file.
        FileInputStream fis = new FileInputStream(file);
        // Create a MessageDigest object to calculate the hash value of the file.
        MessageDigest digest = MessageDigest.getInstance("MD5");
        // Create a buffer to read the file in chunks, 8192 is randomly chosen because it is a power of 2 (Its a good practice to use powers of 2 when working with buffers)
        byte[] buffer = new byte[8192];

        int bytesRead;

        while ((bytesRead = fis.read(buffer)) != -1) {
            digest.update(buffer, 0, bytesRead);
        }

        byte[] hashBytes = digest.digest();

        StringBuilder hashBuilder = new StringBuilder();

        for (byte b : hashBytes) {
            hashBuilder.append(String.format("%02x", b));
        }

        fis.close();

        return hashBuilder.toString();
    }
}