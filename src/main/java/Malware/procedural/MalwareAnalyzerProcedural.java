package Malware.procedural;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;

public class MalwareAnalyzerProcedural {
    public static void main(String[] args) {

        String filePath = "./src/main/java/Malware/procedural/test.txt"; // getInputFilePath();

        byte[] fileContents = readFileContents(filePath);

        String fileHash = calculateHash(fileContents);

        boolean malwareorNot = compareHashWithDatabase(fileHash);

        System.out.println("The hash of the file is: " + fileHash);

        if (malwareorNot) {
            System.out.println("[!] The file is detected as malware.");
        } else {
            System.out.println("[!] The file is not detected as malware.");
        }
    }

    private static String getInputFilePath() {

        System.out.print("Enter the path to the file: ");

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        try {
            return reader.readLine();
        } catch (IOException e) {
            System.out.println("Catched an IO exception while reading the input at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        } catch (NullPointerException e) {
            System.out.println("Catched a null pointer exception while reading the input at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        } catch (Exception e) {
            System.out.println("Catched an exception while reading the input at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        }
    }

    private static byte[] readFileContents(String filePath) {

        try {

            Path path = Paths.get(filePath);
            return Files.readAllBytes(path);

        } catch (IOException e) {
            System.out.println("Catched an IO exception while reading the file at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        } catch (NullPointerException e) {

            System.out.println("Catched a null pointer exception while reading the file at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        } catch (Exception e) {
            System.out.println("Catched an exception while reading the file at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        }
    }

    private static String calculateHash(byte[] fileContents) {

        try {

            MessageDigest digest = MessageDigest.getInstance("MD5");
            byte[] hashBytes = digest.digest(fileContents);
            return bytesToHex(hashBytes);

        } catch (NoSuchAlgorithmException e) {
            System.out.println("Catched a no such algorithm exception while calculating the hash at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        } catch (NullPointerException e) {
            System.out.println("Catched a null pointer exception while calculating the hash at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        } catch (Exception e) {
            System.out.println("Catched an exception while calculating the hash at line"
                    + e.getStackTrace()[0].getLineNumber() + ".");
            return null;
        }
    }

    private static boolean compareHashWithDatabase(String fileHash) {

        String[] signatureDatabase = getSignatureDatabase(); // Assuming this method gets the signatures from a database

        for (String signature : signatureDatabase) {

            if (fileHash.equals(signature)) {
                return true;
            }
        }
        return false;
    }

    private static String[] getSignatureDatabase() {

        // Retrieve the known malware signatures from a database or a file
        return new String[] { "d41d8cd98f00b204e9800998ecf8427e", "hash", "hash" };
    }

    // bytes to hex is to convert the hash bytes to a hex string to make it easier to compare, example: 0a1b2c3d -> "0a1b2c3d"
    private static String bytesToHex(byte[] bytes) {

        StringBuilder sb = new StringBuilder();

        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }

        return sb.toString();
    }
}

// ! Done