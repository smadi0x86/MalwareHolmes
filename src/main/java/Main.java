import Malware.event_driven.MalwareAnalyzerEventDriven; // Create an object of the MalwareAnalyzerEventDriven class to use the GUI feature to choose a file for testing.
import Malware.object_oriented.MalwareAnalyzer; // Create an object of the MalwareAnalyzer class to analyze an input file using an object-oriented paradigm.
import Malware.object_oriented.ManualMalwareAnalyzer; // Create an object of the ManualMalwareAnalyzer class to perform manual checking on the file to detect any malicious keywords in the file.
import Malware.object_oriented.SignatureIdentifier; // Create an object of the SignatureIdentifier class to compare the calculated hash value with known malware signatures.
import Malware.object_oriented.SignatureDatabase; // Create an object of the SignatureDatabase class to store the malware signatures.

import java.io.FileNotFoundException; // Import the FileNotFoundException class to handle FileNotFoundException exceptions.
import java.io.IOException; // Import the IOException class to handle the IOException that is thrown by the loadSignaturesFromFile method of the SignatureDatabase class.

public class Main {

    public static void main(String[] args) {

        /*
         * This is the main class of the program and serves as the entry point. 
         * It initializes the necessary objects (SignatureDatabase, SignatureIdentifier, MalwareAnalyzer, ManualMalwareAnalyzer and MalwareAnalyzerEventDriven). 
         * Loads the malware signatures from a CSV file, accepts a file path as a command-line argument. 
         * Invokes the analyzeFile method of MalwareAnalyzer class to perform the analysis, and displays the analysis result.
         * Main method doesn't throw any exceptions because there is no thing above it to catch the exceptions, so it will be handled by the JVM.
         * Main method catches any exceptions that are thrown by the methods it invokes.
         
         ! Pseudo Code:
         ? 0. Import all necessary libraries.
         ? 1. Implement the main method, which serves as the entry point of the program.
         ? 3. Within the main method:
        a. Create an instance of the SignatureDatabase class.
        b. Load the malware signatures from the CSV file using the loadSignaturesFromFile method of the SignatureDatabase class.
        c. Create an instance of the SignatureIdentifier class and pass the SignatureDatabase object to its constructor.
        d. Create an instance of the MalwareAnalyzer class and pass the SignatureIdentifier object to its constructor.
        e. Accept the input file path or file object as a command-line argument.
        f. Invoke the analyzeFile method of the MalwareAnalyzer class and pass the input file path as an argument.
        g. Handle the output of the analysis and display it to the user.
        ? 4. Ask user if he wants to use the second manual test to identify the malware:
        a. Create an instance of the ManualMalwareAnalyzer class and pass the SignatureIdentifier object to its constructor.
        b. Ask user if he wants to use the second test to identify the malware.
        c. If the user's answer is "y", then invoke the analyzeFile method of the ManualMalwareAnalyzer class and pass the input file path as an argument.
        d. Handle the output of the analysis and display it to the user.
        ? 5. Ask user if he wants to use the GUI feature to choose a file for testing.
        ? 6. If the user's answer is "y", then create an object of the MalwareAnalyzerEventDriven class and pass the SignatureIdentifier object to its constructor.
        
        * References:
        *  - https://www.geeksforgeeks.org/throws-keyword-in-java/
        *  - https://www.geeksforgeeks.org/throw-throws-java/
        *  - https://www.geeksforgeeks.org/checked-vs-unchecked-exceptions-in-java/
        *  - https://www.geeksforgeeks.org/throwable-class-in-java-with-example/
        *  - https://www.geeksforgeeks.org/exception-handling-with-method-overriding-in-java/
        *  - https://www.geeksforgeeks.org/throwing-exceptions-in-java/
        *  - https://stackoverflow.com/questions/285177/how-do-i-call-one-constructor-from-another-in-java
        */

        //  Create an object of the SignatureDatabase class to store the malware signatures ( Does not throw any exceptions )
        SignatureDatabase signatureDatabase = new SignatureDatabase();

        //  Load the malware signatures from the CSV file, catch the IOException and Exception that are thrown by the loadSignaturesFromFile method.
        try {
            signatureDatabase.loadSignaturesFromFile("src/main/java/resources/malware_hashes.csv");
            // ! more specific exception should be caught first
        } catch (FileNotFoundException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
            // ! more general exception should be caught last
        } catch (Exception e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        }

        //  Create an object of the SignatureIdentifier class and pass the SignatureDatabase object to its constructor ( Does not throw any exceptions )
        SignatureIdentifier signatureIdentifier = new SignatureIdentifier(signatureDatabase);

        //  Create an object of the MalwareAnalyzer class and pass the SignatureIdentifier object to its constructor ( Does not throw any exceptions )
        MalwareAnalyzer malwareAnalyzer = new MalwareAnalyzer(signatureIdentifier);

        String filePath = args[0]; // Accept the input file path or file object as a command-line argument, 0 is the first argument.

        // General check for the input file path.
        if (args.length > 1) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }
        if (filePath == null || filePath.isEmpty()) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }

        System.out.println("[!] Analyzing file: " + filePath); // Print the file path being analyzed to the console.
        System.out.println();
        String analysisResult; // This variable will store the analysis result.

        try {
            // Invoke the analyzeFile method of the MalwareAnalyzer class and pass the input file path as an argument.
            analysisResult = malwareAnalyzer.analyzeFile(filePath);

            // Handle the output of the analysis and display it to the user
            System.out.println("[*] Analysis hash result for your file:");
            System.out.println(analysisResult);
            System.out.println();

            // ! Catch the IOException from the analyzeFile method in the MalwareAnalyzer class.
        } catch (IOException e) {
            System.out.println("Error catched: " + e.getMessage()); // Print the error message.
            e.printStackTrace(); // The stack strace is the list of method calls that lead to the exception and its printed to the console.
        } catch (Exception e) {
            System.out.println("Error catched: " + e.getMessage()); // Print the error message.
            e.printStackTrace(); // The stack strace is the list of method calls that lead to the exception and its printed to the console.
        }

        // * If the first test didnt identify the malware, then we will use the second test to identify the malware:

        //  Create an object of the ManualMalwareAnalyzer class and pass the SignatureIdentifier object to its constructor ( Does not throw any exceptions )
        ManualMalwareAnalyzer manualMalwareAnalyzer = new ManualMalwareAnalyzer(signatureIdentifier);

        // ? Ask user if he wants to use the second test to identify the malware
        System.out.println("[?] Do you want to use manual keyword test to identify the malware? (y/n)");
        System.out.print("Choose: ");
        String answer = System.console().readLine(); // Read the user's answer from the console.

        // ? If the user's answer is not "y" or "n", then print the usage message and exit the program
        if (!answer.equals("y") && !answer.equals("n")) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }

        // ? If the user's answer is "y", then invoke the analyzeFile method of the ManualMalwareAnalyzer class and pass the input file path as an argument
        if (answer.equals("y")) {

            try {
                // ! Invoke the analyzeFile method of the ManualMalwareAnalyzer class and pass the input file path as an argument.
                analysisResult = manualMalwareAnalyzer.analyzeFile(filePath);

                // ! Catch the IOException from the analyzeFile method in the ManualMalwareAnalyzer class.
            } catch (IOException e) {
                System.out.println("Error catched: " + e.getMessage()); // Print the error message.
                e.printStackTrace(); // The stack strace is the list of method calls that lead to the exception and its printed to the console.
            } catch (Exception e) {
                System.out.println("Error catched: " + e.getMessage()); // Print the error message.
                e.printStackTrace(); // The stack strace is the list of method calls that lead to the exception and its printed to the console.
            }
        }

        // * Ask user if he wants to use the GUI feature to choose a file for testing:

        System.out.println();
        System.out.println("[?] Would you like to use the GUI feature to choose a file for testing? (y/n)");
        System.out.print("Choose: ");
        answer = System.console().readLine(); // Read the user's answer from the console.

        // ? If the user's answer is not "y" or "n", then print the usage message and exit the program.
        if (!answer.equals("y") && !answer.equals("n")) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }

        // ? If the user's answer is "y", then create an object of the MalwareAnalyzerEventDriven class and pass the SignatureIdentifier object to its constructor.
        if (answer.equals("y")) {

            MalwareAnalyzerEventDriven malwareAnalyzerEventDriven = new MalwareAnalyzerEventDriven(signatureIdentifier);
            malwareAnalyzerEventDriven.displayFileInput();
        }
    }
}

// ! Done 
