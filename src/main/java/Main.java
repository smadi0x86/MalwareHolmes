import Malware.event_driven.MalwareAnalyzerEventDriven;
import Malware.object_oriented.MalwareAnalyzer;
import Malware.object_oriented.ManualMalwareAnalyzer;
import Malware.object_oriented.SignatureIdentifier;
import Malware.object_oriented.SignatureDatabase;

import java.io.FileNotFoundException;
import java.io.IOException;

public class Main {

    public static void main(String[] args) {

        /*
         * This is the main class of the program and serves as the entry point. 
         * It initializes the necessary objects (SignatureDatabase, SignatureIdentifier, MalwareAnalyzer, ManualMalwareAnalyzer and MalwareAnalyzerEventDriven). 
         * Loads the malware signatures from a CSV file, accepts a file path as a command-line argument. 
         * Invokes the analyzeFile method of MalwareAnalyzer class to perform the analysis, and displays the analysis result.
         * Main method doesn't throw any exceptions because there is no thing above it to catch the exceptions, so it will be handled by the JVM.
         * Main method catches any exceptions that are thrown by the methods it invokes.
        */

        //  Create an object of the SignatureDatabase class to store the malware signatures (Does not throw any exceptions)
        SignatureDatabase signatureDatabase = new SignatureDatabase();

        //  Load the malware signatures from the CSV file, catch the IOException and Exception that are thrown by the loadSignaturesFromFile method.
        try {
            signatureDatabase.loadSignaturesFromFile("src/main/java/resources/malware_hashes.csv");
            // ! more specific exception should be caught first
        } catch (FileNotFoundException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        } catch (IOException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
            // ! more general exception should be caught last
        } catch (Exception e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        }

        //  Create an object of the SignatureIdentifier class and pass the SignatureDatabase object to its constructor (Does not throw any exceptions)
        SignatureIdentifier signatureIdentifier = new SignatureIdentifier(signatureDatabase);

        //  Create an object of the MalwareAnalyzer class and pass the SignatureIdentifier object to its constructor (Does not throw any exceptions)
        MalwareAnalyzer malwareAnalyzer = new MalwareAnalyzer(signatureIdentifier);

        String filePath = args[0];

        // General check for the input file path.
        if (args.length > 1) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }
        if (filePath == null || filePath.isEmpty()) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }

        System.out.println("[!] Analyzing file: " + filePath);
        System.out.println();
        String analysisResult;

        try {
            // Invoke the analyzeFile method of the MalwareAnalyzer class and pass the input file path as an argument.
            analysisResult = malwareAnalyzer.analyzeFile(filePath);

            // Handle the output of the analysis and display it to the user
            System.out.println("[*] Analysis hash result for your file:");
            System.out.println(analysisResult);
            System.out.println();

            // ! Catch the IOException from the analyzeFile method in the MalwareAnalyzer class.
        } catch (IOException e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.out.println("Error catched: " + e.getMessage());
            e.printStackTrace();
        }

        //  Create an object of the ManualMalwareAnalyzer class and pass the SignatureIdentifier object to its constructor (Does not throw any exceptions)
        ManualMalwareAnalyzer manualMalwareAnalyzer = new ManualMalwareAnalyzer(signatureIdentifier);

        // Ask user if he wants to use the second test to identify the malware
        System.out.println("[?] Do you want to use manual keyword test to identify the malware? (y/n)");
        System.out.print("Choose: ");
        String answer = System.console().readLine();

        if (!answer.equals("y") && !answer.equals("n")) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }

        if (answer.equals("y")) {

            try {
                // ! Invoke the analyzeFile method of the ManualMalwareAnalyzer class and pass the input file path as an argument.
                analysisResult = manualMalwareAnalyzer.analyzeFile(filePath);

                // ! Catch the IOException from the analyzeFile method in the ManualMalwareAnalyzer class.
            } catch (IOException e) {
                System.out.println("Error catched: " + e.getMessage());
                e.printStackTrace();
            } catch (Exception e) {
                System.out.println("Error catched: " + e.getMessage());
                e.printStackTrace();
            }
        }

        System.out.println();
        System.out.println("[?] Would you like to use the GUI feature to choose a file for testing? (y/n)");
        System.out.print("Choose: ");
        answer = System.console().readLine();

        if (!answer.equals("y") && !answer.equals("n")) {
            System.out.println("[?] Usage: java Main <file path>");
            return;
        }

        if (answer.equals("y")) {

            MalwareAnalyzerEventDriven malwareAnalyzerEventDriven = new MalwareAnalyzerEventDriven(signatureIdentifier);
            malwareAnalyzerEventDriven.displayFileInput();
        }
    }
}
