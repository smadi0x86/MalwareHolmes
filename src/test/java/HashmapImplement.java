public class HashmapImplement<Key, Value> {

    // * This is a basic hashmap for explaining the concept of a hashmap without using built-in functions:
    // * The Hashmap is an efficient data structure for storing and retrieving the malware hashes and it works with key value pairs, but it uses alot of memory.
    // * Time complexity: O(1) for insertion and retrieval with the built-in hashmap, O(n) for insertion and retrieval with the basic hashmap.
    // * O(1) means that the time it takes to insert or retrieve an element from the hashmap is constant, it does not depend on the size of the hashmap.
    // * The built-in hashmap is more efficient than the basic hashmap, but it is more complex and it is not suitable for explaining the concept of a hashmap.

    // * References:
    // * https://www.geeksforgeeks.org/internal-working-of-hashmap-java/
    // * https://www.geeksforgeeks.org/hashmap-in-java/
    // * https://www.geeksforgeeks.org/working-with-hashmap-in-java/
    // * https://stackoverflow.com/questions/529085/how-to-create-a-generic-array-in-java

    private Key[] keyArray; // This is the array that will store the keys.
    private Value[] valueArray; // This is the array that will store the values.
    private int size; // This is the size of the hashmap (the number of elements in the hashmap).

    public void initial() {
        keyArray = (Key[]) new Object[10]; // Initialize the key array with a size of 10, it gives a warning because of type erasure (https://docs.oracle.com/javase/tutorial/java/generics/erasure.html)
        valueArray = (Value[]) new Object[10]; // Initialize the value array with a size of 10.
        size = 0; // Initialize the size to 0.
    }

    public void basicImplementation(Key key, Value value) {
        // This method will add a key-value pair to the hashmap.
        // It will take a key and a value as parameters.
        // It will return nothing.

        // Check if the key already exists in the hashmap.
        for (int iterator = 0; iterator < size; iterator++) {
            if (keyArray[iterator].equals(key)) {
                // If the key already exists, update the value.
                valueArray[iterator] = value;
                return;
            }
        }

        // If the key does not exist, add the key-value pair to the hashmap.
        keyArray[size] = key;
        valueArray[size] = value;
        size++;
    }
}
