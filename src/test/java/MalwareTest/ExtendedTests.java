package MalwareTest;

import Malware.logic.DirectoryMonitorService;
import Malware.logic.MalwareAnalyzer;
import Malware.logic.SignatureDatabase;
import Malware.logic.SignatureIdentifier;
import redis.clients.jedis.Jedis;

import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;

import java.io.IOException;
import java.nio.file.*;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.*;

public class ExtendedTests {

    private SignatureDatabase signatureDatabase;
    private MalwareAnalyzer malwareAnalyzer;
    private DirectoryMonitorService directoryMonitorService;
    private Thread directoryMonitorThread;

    private final static String TEST_DIRECTORY_PATH = "src/test/java/MalwareTest";
    private final static String TEST_FILE_PATH = TEST_DIRECTORY_PATH + "/analysis_test_file.txt";
    private final static String SIGNATURES_FILE_PATH = TEST_DIRECTORY_PATH + "/signatures_test_file.txt";

    @Before
    public void setUp() {
        signatureDatabase = new SignatureDatabase();
        SignatureIdentifier signatureIdentifier = new SignatureIdentifier(signatureDatabase, TEST_DIRECTORY_PATH);
        malwareAnalyzer = new MalwareAnalyzer(signatureIdentifier);
        directoryMonitorService = new DirectoryMonitorService(Paths.get(TEST_DIRECTORY_PATH),
                malwareAnalyzer, (path) -> true);
        directoryMonitorThread = new Thread(directoryMonitorService);

        // Create the directory and files if they do not exist before each test.
        try {
            if (!Files.exists(Paths.get(TEST_DIRECTORY_PATH))) {
                Files.createDirectories(Paths.get(TEST_DIRECTORY_PATH));
            }
            if (!Files.exists(Paths.get(TEST_FILE_PATH))) {
                Files.createFile(Paths.get(TEST_FILE_PATH));
            }
            if (!Files.exists(Paths.get(SIGNATURES_FILE_PATH))) {
                Files.createFile(Paths.get(SIGNATURES_FILE_PATH));
                Files.write(Paths.get(SIGNATURES_FILE_PATH), "sampleHash=d41d8cd98f00b204e9800998ecf8427e".getBytes());
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @After
    public void cleanup() {
        if (directoryMonitorThread.isAlive()) {
            directoryMonitorThread.interrupt();
        }
    }

    @AfterClass
    public static void tearDown() {
        try {
            Files.deleteIfExists(Paths.get(TEST_FILE_PATH));
            Files.deleteIfExists(Paths.get(SIGNATURES_FILE_PATH));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testAnalyzeFile() {
        try {
            String analysisResult = malwareAnalyzer.analyzeFile(TEST_FILE_PATH);
            assertNotNull("Analysis result should not be null", analysisResult);
        } catch (Exception e) {
            fail("Exception should not have been thrown.");
        }
    }

    @Test
    public void testFileCreationInDirectory() {
        try {
            // Start the DirectoryMonitorService first
            directoryMonitorThread.start();

            // Delete the file if it exists
            Files.deleteIfExists(Paths.get(TEST_FILE_PATH));

            // Then create the file
            Files.createFile(Paths.get(TEST_FILE_PATH));

            // Wait for directoryMonitorThread to finish
            directoryMonitorThread.join(TimeUnit.SECONDS.toMillis(10));

            // Now verify if the file was processed
            String analysisResult = malwareAnalyzer.analyzeFile(TEST_FILE_PATH);
            assertNotNull("Analysis result should not be null", analysisResult);
        } catch (Exception e) {
            fail("Exception should not have been thrown: " + e.getMessage());
        }
    }

    @Test
    public void testRedisConnection() {
        try (Jedis jedis = new Jedis("localhost", 6379)) {
            String pong = jedis.ping();
            assertEquals("PONG", pong);
        } catch (Exception e) {
            fail("Could not connect to Redis: " + e.getMessage());
        }
    }

    @Test
    public void testSignatureLoadingFromFile() {
        signatureDatabase.loadSignaturesFromFile(SIGNATURES_FILE_PATH);
        String malwareName = signatureDatabase.getMalwareNameByHash("d41d8cd98f00b204e9800998ecf8427e");
        assertEquals("Malware name should be Not a malware (test)", "Not a malware (test)", malwareName);
    }
}
